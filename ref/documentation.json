{"doc":{"assembly":{"name":"KNXLib"},"members":{"member":[{"$":{"name":"T:KNXLib.Log.Logger"},"summary":"\r\n            "},{"$":{"name":"T:KNXLib.Log.Logger.DebugEvent"},"summary":"\r\n            ","param":[{"$":{"name":"id"}},{"$":{"name":"message"}}]},{"$":{"name":"F:KNXLib.Log.Logger.DebugEventEndpoint"},"summary":"\r\n            "},{"$":{"name":"T:KNXLib.Log.Logger.InfoEvent"},"summary":"\r\n            ","param":[{"$":{"name":"id"}},{"$":{"name":"message"}}]},{"$":{"name":"F:KNXLib.Log.Logger.InfoEventEndpoint"},"summary":"\r\n            "},{"$":{"name":"T:KNXLib.Log.Logger.WarnEvent"},"summary":"\r\n            ","param":[{"$":{"name":"id"}},{"$":{"name":"message"}}]},{"$":{"name":"F:KNXLib.Log.Logger.WarnEventEndpoint"},"summary":"\r\n            "},{"$":{"name":"T:KNXLib.Log.Logger.ErrorEvent"},"summary":"\r\n            ","param":[{"$":{"name":"id"}},{"$":{"name":"message"}}]},{"$":{"name":"F:KNXLib.Log.Logger.ErrorEventEndpoint"},"summary":"\r\n            "},{"$":{"name":"T:KNXLib.KnxConnectionTunneling"},"summary":"\r\n                Class that controls a Tunneling KNX connection, a tunneling connection is UDP based and has state.\r\n                This class will connect to the remote gateway provided and create an endpoint for the remote gateway\r\n                to connect back\r\n            "},{"$":{"name":"M:KNXLib.KnxConnectionTunneling.#ctor(System.String,System.Int32,System.String,System.Int32)"},"summary":"\r\n                Initializes a new KNX tunneling connection with provided values. Make sure the local system allows\r\n                UDP messages to the localIpAddress and localPort provided\r\n            ","param":[{"_":"Remote gateway IP address","$":{"name":"remoteIpAddress"}},{"_":"Remote gateway port","$":{"name":"remotePort"}},{"_":"Local IP address to bind to","$":{"name":"localIpAddress"}},{"_":"Local port to bind to","$":{"name":"localPort"}}]},{"$":{"name":"M:KNXLib.KnxConnectionTunneling.Connect"},"summary":"\r\n                Start the connection\r\n            "},{"$":{"name":"M:KNXLib.KnxConnectionTunneling.Disconnect"},"summary":"\r\n                Stop the connection\r\n            "},{"$":{"name":"T:KNXLib.Exceptions.InvalidKnxDataException"},"summary":"\r\n            Exception is thrown when invalid data has been provided to an action method\r\n            "},{"$":{"name":"M:KNXLib.Exceptions.InvalidKnxDataException.#ctor(System.String)"},"summary":"\r\n            Initializes a new instance of the InvalidKnxDataException class.\r\n            ","param":{"$":{"name":"data"}}},{"$":{"name":"M:KNXLib.Exceptions.InvalidKnxDataException.ToString"},"summary":"\r\n            Creates and returns a string representation of the current exception.\r\n            ","returns":"\r\n            A string representation of the current exception.\r\n            "},{"$":{"name":"T:KNXLib.Exceptions.InvalidKnxAddressException"},"summary":"\r\n            Exception thrown when an invalid KNX address is used to perform an action or status query\r\n            "},{"$":{"name":"M:KNXLib.Exceptions.InvalidKnxAddressException.#ctor(System.String)"},"summary":"\r\n            Initializes a new instance of the InvalidKnxAddressException class.\r\n            ","param":{"$":{"name":"address"}}},{"$":{"name":"M:KNXLib.Exceptions.InvalidKnxAddressException.ToString"},"summary":"\r\n            Creates and returns a string representation of the current exception.\r\n            ","returns":"\r\n            A string representation of the current exception.\r\n            "},{"$":{"name":"T:KNXLib.Exceptions.InvalidHostException"},"summary":"\r\n            Exception thrown when trying to connect to an invalid host\r\n            "},{"$":{"name":"M:KNXLib.Exceptions.InvalidHostException.#ctor(System.String)"},"summary":"\r\n            Initializes a new instance of the InvalidHostException class\r\n            ","param":{"$":{"name":"host"}}},{"$":{"name":"M:KNXLib.Exceptions.InvalidHostException.ToString"},"summary":"\r\n            Creates and returns a string representation of the current exception.\r\n            ","returns":"\r\n            A string representation of the current exception.\r\n            "},{"$":{"name":"T:KNXLib.KnxConnectionRouting"},"summary":"\r\n                Class that controls a Routing KNX connection, a routing connection is UDP based and has no state.\r\n                This class will bind to a multicast address to listen for events and send actions and requests to\r\n                that same address\r\n            "},{"$":{"name":"M:KNXLib.KnxConnectionRouting.#ctor"},"summary":"\r\n                Initializes a new KNX routing connection with default values. The default multicast address is\r\n                224.0.23.12 and the default port is 3671. Make sure the local system allows UDP messages to this port\r\n            "},{"$":{"name":"M:KNXLib.KnxConnectionRouting.#ctor(System.Int32)"},"summary":"\r\n                Initializes a new KNX routing connection with default address and provided port. The default multicast\r\n                address is 224.0.23.12. Make sure the local system allows UDP messages to the provided port\r\n            ","param":{"_":"UDP port to send/receive KNX messages","$":{"name":"port"}}},{"$":{"name":"M:KNXLib.KnxConnectionRouting.#ctor(System.String)"},"summary":"\r\n                Initializes a new KNX routing connection with provided address and default port. The default port is\r\n                3671. Make sure the local system allows UDP messages to this port\r\n            ","param":{"_":"UDP multicast address to send/receive KNX messages","$":{"name":"host"}}},{"$":{"name":"M:KNXLib.KnxConnectionRouting.#ctor(System.String,System.Int32)"},"summary":"\r\n                Initializes a new KNX routing connection with provided address and port. Make sure the local system\r\n                allows UDP messages to the provided port\r\n            ","param":[{"_":"UDP multicast address to send/receive KNX messages","$":{"name":"host"}},{"_":"UDP port to send/receive KNX messages","$":{"name":"port"}}]},{"$":{"name":"M:KNXLib.KnxConnectionRouting.Connect"},"summary":"\r\n                Start the connection\r\n            "},{"$":{"name":"M:KNXLib.KnxConnectionRouting.Disconnect"},"summary":"\r\n                Stop the connection\r\n            "},{"$":{"name":"T:KNXLib.KnxConnection"},"summary":"\r\n                Base class that controls the KNX connection, implemented by KnxConnectionRouting and KnxConnetionTunneling\r\n            "},{"$":{"name":"T:KNXLib.KnxConnection.KnxConnected"},"summary":"\r\n                Delegate function for connection established trigger\r\n            "},{"$":{"name":"F:KNXLib.KnxConnection.KnxConnectedDelegate"},"summary":"\r\n                Event triggered when connection is established\r\n            "},{"$":{"name":"T:KNXLib.KnxConnection.KnxDisconnected"},"summary":"\r\n                Delegate function for disconnection trigger\r\n            "},{"$":{"name":"F:KNXLib.KnxConnection.KnxDisconnectedDelegate"},"summary":"\r\n                Event triggered when connection drops\r\n            "},{"$":{"name":"T:KNXLib.KnxConnection.KnxEvent"},"summary":"\r\n                Delegate function for KNX events\r\n            ","param":[{"$":{"name":"address"}},{"$":{"name":"state"}}]},{"$":{"name":"F:KNXLib.KnxConnection.KnxEventDelegate"},"summary":"\r\n                Event triggered when there is a new KNX event\r\n            "},{"$":{"name":"T:KNXLib.KnxConnection.KnxStatus"},"summary":"\r\n                Delegate function for KNX status queries\r\n            ","param":[{"$":{"name":"address"}},{"$":{"name":"state"}}]},{"$":{"name":"F:KNXLib.KnxConnection.KnxStatusDelegate"},"summary":"\r\n                Event triggered when received a status after a query\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.#ctor(System.String,System.Int32)"},"summary":"\r\n                Create a new KNX Connection to specified host and port\r\n            ","param":[{"_":"Host to connect","$":{"name":"host"}},{"_":"Port to use","$":{"name":"port"}}]},{"$":{"name":"P:KNXLib.KnxConnection.RemoteEndpoint"},"summary":"\r\n                Get the IPEndPoint instance representing the remote KNX gateway\r\n            "},{"$":{"name":"P:KNXLib.KnxConnection.ThreeLevelGroupAddressing"},"summary":"\r\n                Configure this paramenter based on the KNX installation:\r\n                - true: 3-level group address: main/middle/sub(5/3/8 bits)\r\n                - false: 2-level group address: main/sub (5/11 bits)\r\n                Default: true\r\n            "},{"$":{"name":"P:KNXLib.KnxConnection.Debug"},"summary":"\r\n                Set to true to receive debug log messages\r\n            "},{"$":{"name":"P:KNXLib.KnxConnection.ActionMessageCode"},"summary":"\r\n                Some KNX Routers/Interfaces might need this parameter defined, some need this to be 0x29.\r\n                Default: 0x00\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.Connect"},"summary":"\r\n                Start the connection\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.Disconnect"},"summary":"\r\n                Stop the connection\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.Connected"},"summary":"\r\n                Event triggered by implementing class to notify that the connection has been established\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.Disconnected"},"summary":"\r\n                Event triggered by implementing class to notify that the connection has been established\r\n            "},{"$":{"name":"M:KNXLib.KnxConnection.Action(System.String,System.Boolean)"},"summary":"\r\n                Send a bit value as data to specified address\r\n            ","param":[{"_":"KNX Address","$":{"name":"address"}},{"_":"Bit value","$":{"name":"data"}}],"exception":{"$":{"cref":"T:KNXLib.Exceptions.InvalidKnxDataException"}}},{"$":{"name":"M:KNXLib.KnxConnection.Action(System.String,System.String)"},"summary":"\r\n                Send a string value as data to specified address\r\n            ","param":[{"_":"KNX Address","$":{"name":"address"}},{"_":"String value","$":{"name":"data"}}],"exception":{"$":{"cref":"T:KNXLib.Exceptions.InvalidKnxDataException"}}},{"$":{"name":"M:KNXLib.KnxConnection.Action(System.String,System.Int32)"},"summary":"\r\n                Send an int value as data to specified address\r\n            ","param":[{"_":"KNX Address","$":{"name":"address"}},{"_":"Int value","$":{"name":"data"}}],"exception":{"$":{"cref":"T:KNXLib.Exceptions.InvalidKnxDataException"}}},{"$":{"name":"M:KNXLib.KnxConnection.Action(System.String,System.Byte)"},"summary":"\r\n                Send a byte value as data to specified address\r\n            ","param":[{"_":"KNX Address","$":{"name":"address"}},{"_":"byte value","$":{"name":"data"}}]},{"$":{"name":"M:KNXLib.KnxConnection.Action(System.String,System.Byte[])"},"summary":"\r\n                Send a byte array value as data to specified address\r\n            ","param":[{"_":"KNX Address","$":{"name":"address"}},{"_":"Byte array value","$":{"name":"data"}}]},{"$":{"name":"M:KNXLib.KnxConnection.RequestStatus(System.String)"},"summary":"\r\n                Send a request to KNX asking for specified address current status\r\n            ","param":{"$":{"name":"address"}}},{"$":{"name":"M:KNXLib.KnxConnection.FromDataPoint(System.String,System.String)"},"summary":"\r\n                Convert a value received from KNX using datapoint translator, e.g.,\r\n                get a temperature value in Celsius\r\n            ","param":[{"_":"Datapoint type, e.g.: 9.001","$":{"name":"type"}},{"_":"Data to convert","$":{"name":"data"}}],"returns":""},{"$":{"name":"M:KNXLib.KnxConnection.FromDataPoint(System.String,System.Byte[])"},"summary":"\r\n                Convert a value received from KNX using datapoint translator, e.g.,\r\n                get a temperature value in Celsius\r\n            ","param":[{"_":"Datapoint type, e.g.: 9.001","$":{"name":"type"}},{"_":"Data to convert","$":{"name":"data"}}],"returns":""},{"$":{"name":"M:KNXLib.KnxConnection.ToDataPoint(System.String,System.String)"},"summary":"\r\n                Convert a value to send to KNX using datapoint translator, e.g.,\r\n                get a temperature value in Celsius in a byte representation\r\n            ","param":[{"_":"Datapoint type, e.g.: 9.001","$":{"name":"type"}},{"_":"Value to convert","$":{"name":"value"}}],"returns":""},{"$":{"name":"M:KNXLib.KnxConnection.ToDataPoint(System.String,System.Object)"},"summary":"\r\n                Convert a value to send to KNX using datapoint translator, e.g.,\r\n                get a temperature value in Celsius in a byte representation\r\n            ","param":[{"_":"Datapoint type, e.g.: 9.001","$":{"name":"type"}},{"_":"Value to convert","$":{"name":"value"}}],"returns":""}]}}}